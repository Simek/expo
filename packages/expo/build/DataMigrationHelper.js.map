{"version":3,"file":"DataMigrationHelper.js","sourceRoot":"","sources":["../src/DataMigrationHelper.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,gBAAgB,CAAC;AACvC,OAAO,KAAK,UAAU,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,MAAM,UAAU,iCAAiC;IAC7C,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,IAAI,UAAU,CAAC,iBAAiB,IAAI,IAAI,EAAE;QACnE,OAAO,IAAI,CAAC;KACf;IACD,4DAA4D;IAC5D,IAAI,EAAE,GAAW,kBAAkB,CAAC,kBAAkB,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/E,MAAM,iBAAiB,GAAG,GAAG,UAAU,CAAC,iBAAiB,kBAAkB,EAAE,EAAE,CAAC;IAChF,OAAO,iBAAiB,CAAA;AAC5B,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,oCAAoC;IACtD,MAAM,EAAE,YAAY,EAAE,GAAG,SAAS,CAAC;IACnC,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,IAAI,YAAY,KAAK,YAAY,EAAE;QAC5D,MAAM,iBAAiB,GAAG,iCAAiC,EAAE,CAAC;QAC9D,MAAM,iBAAiB,GAAG,UAAU,CAAC,iBAAiB,CAAC;QACvD,IAAI,iBAAiB,IAAI,IAAI,IAAI,iBAAiB,IAAI,IAAI,EAAE;YACxD,OAAO;SACV;QAED,MAAM,qBAAqB,GAAG,MAAM,UAAU,CAAC,YAAY,CAAU,iBAAiB,CAAC,CAAC;QACxF,MAAM,0BAA0B,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAEnE,IAAI,0BAA0B,EAAE;YAC5B,MAAM,UAAU,CAAC,SAAS,CAAC;gBACvB,IAAI,EAAW,iBAAiB;gBAChC,EAAE,EAAW,iBAAiB;aACjC,CAAC,CAAA;YACF,MAAM,UAAU,CAAC,WAAW,CAAU,iBAAiB,CAAC,CAAC;SAC5D;KACJ;AACL,CAAC","sourcesContent":["import Constants from 'expo-constants';\nimport * as FileSystem from 'expo-file-system';\nimport { Platform } from 'react-native';\n\nexport function getLegacyDocumentDirectoryAndroid(): string | null {\n    if (Platform.OS !== 'android' || FileSystem.documentDirectory == null) {\n        return null;\n    } \n    // expo-file-system decodes paths so we need to encode twice\n    let id: string = encodeURIComponent(encodeURIComponent(Constants.manifest.id));\n    const oldFilesDirectory = `${FileSystem.documentDirectory}ExperienceData/${id}`;\n    return oldFilesDirectory\n}\n\nexport async function migrateFilesFromLegacyDirectoryAsync(): Promise<void> {\n    const { appOwnership } = Constants;\n    if (Platform.OS === 'android' && appOwnership === \"standalone\") {\n        const oldFilesDirectory = getLegacyDocumentDirectoryAndroid();\n        const newFilesDirectory = FileSystem.documentDirectory;\n        if (oldFilesDirectory == null || newFilesDirectory == null) {\n            return;\n        }\n\n        const oldFilesDirectoryInfo = await FileSystem.getInfoAsync(<string> oldFilesDirectory);\n        const doesOldFilesDirectoryExist = oldFilesDirectoryInfo[\"exists\"];\n        \n        if (doesOldFilesDirectoryExist) {\n            await FileSystem.copyAsync({\n                from: <string> oldFilesDirectory,\n                to: <string> newFilesDirectory,\n            })\n            await FileSystem.deleteAsync(<string> oldFilesDirectory);\n        }\n    }\n}"]}